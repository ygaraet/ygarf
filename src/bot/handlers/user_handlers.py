from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import CommandStart

from bot.parser.habr_parser import get_habr_articles, get_full_article_content
from bot.keyboards.inline import get_article_keyboard
from bot.keyboards.reply import get_reply_keyboard
from bot.state import articles, current_article_index, clear_user_messages, add_user_message

router = Router()

def escape_markdown_v2(text: str) -> str:
    if not text:
        return ""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–ï —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    specials = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    escaped = text
    for ch in specials:
        escaped = escaped.replace(ch, f'\\{ch}')
    return escaped

def build_caption_md(title: str, description: str) -> str:
    safe_title = escape_markdown_v2(title)
    safe_desc = escape_markdown_v2(description)
    return f"*{safe_title}*\n\n{safe_desc}"

def split_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        # –ò—â–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        split_pos = text.rfind('.', 0, max_length)
        if split_pos == -1:
            split_pos = text.rfind(' ', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        
        parts.append(text[:split_pos + 1])
        text = text[split_pos + 1:].lstrip()
    
    return parts

@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    global articles, current_article_index
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await clear_user_messages(message.from_user.id, bot)
    
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ —Å Habr.\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–∞—Ç—å—é –∏ –∫–ª–∞–≤–∏—à–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

    articles.clear()
    articles.extend(get_habr_articles())
    current_article_index = 0
    if articles:
        article = articles[current_article_index]
        caption = build_caption_md(article['title'], article['description'])
        if article['image_url']:
            msg = await message.answer_photo(
                photo=article['image_url'],
                caption=caption,
                parse_mode="MarkdownV2",
                reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
            )
        else:
            msg = await message.answer(
                caption,
                parse_mode="MarkdownV2",
                reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
            )
        
        # Send reply keyboard
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_reply_keyboard(
                has_prev=True,
                has_next=current_article_index < len(articles) - 1,
            ),
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ Habr: https://habr.com/ru/articles/")

@router.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"]))
async def reply_nav(message: Message, bot: Bot):
    global current_article_index
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—å–∏
    await clear_user_messages(message.from_user.id, bot)
    
    if not articles:
        await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if current_article_index > 0:
            current_article_index -= 1
        else:
            await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–µ")
            return
    elif message.text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
        if current_article_index < len(articles) - 1:
            current_article_index += 1
        else:
            await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–µ")
            return

    article = articles[current_article_index]
    caption = build_caption_md(article['title'], article['description'])
    if article['image_url']:
        await message.answer_photo(
            photo=article['image_url'],
            caption=caption,
            parse_mode="MarkdownV2",
            reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
        )
    else:
        await message.answer(
            caption,
            parse_mode="MarkdownV2",
            reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
        )

@router.message(F.text == "üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç")
async def show_full_text(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç'"""
    global current_article_index
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await clear_user_messages(message.from_user.id, bot)
    
    print(f"üî¥ DEBUG: –ö–Ω–æ–ø–∫–∞ '–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç' –Ω–∞–∂–∞—Ç–∞!")
    print(f"üî¥ DEBUG: current_article_index = {current_article_index}")
    print(f"üî¥ DEBUG: –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π = {len(articles)}")
    
    if not articles:
        await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    if current_article_index < 0 or current_article_index >= len(articles):
        await message.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    article = articles[current_article_index]
    article_url = article['link']
    
    print(f"üî¥ DEBUG: –°—Ç–∞—Ç—å—è URL = {article_url}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏...")
    
    try:
        print(f"üî¥ DEBUG: –í—ã–∑—ã–≤–∞—é get_full_article_content...")
        full_content = get_full_article_content(article_url)
        print(f"üî¥ DEBUG: get_full_article_content –≤–µ—Ä–Ω—É–ª: {bool(full_content)}")
        
        if not full_content:
            await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
            return
        
        print(f"üî¥ DEBUG: –ó–∞–≥–æ–ª–æ–≤–æ–∫: {full_content['title']}")
        print(f"üî¥ DEBUG: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–∞: {len(full_content['content'])}")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç—ã –¥–ª—è MarkdownV2
        safe_title = escape_markdown_v2(full_content['title'])
        safe_author = escape_markdown_v2(full_content['author'])
        safe_date = escape_markdown_v2(full_content['date'])
        safe_content = escape_markdown_v2(full_content['content'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        header_text = f"üìñ *{safe_title}*\n\nüë§ –ê–≤—Ç–æ—Ä: {safe_author}\nüìÖ –î–∞—Ç–∞: {safe_date}\n\n"
        footer_text = f"\n\nüîó [–ß–∏—Ç–∞—Ç—å –Ω–∞ Habr]({article_url})"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        available_space = 4096 - len(header_text) - len(footer_text) - 100  # –ó–∞–ø–∞—Å
        
        sent_messages = []
        
        if len(safe_content) <= available_space:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = header_text + safe_content + footer_text
            await loading_msg.delete()
            msg = await message.answer(
                message_text,
                parse_mode="MarkdownV2",
                disable_web_page_preview=True
            )
            sent_messages.append(msg.message_id)
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            await loading_msg.edit_text("üìñ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—å—é (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π)...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
            header_msg = await message.answer(
                header_text,
                parse_mode="MarkdownV2",
                disable_web_page_preview=True
            )
            sent_messages.append(header_msg.message_id)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏
            content_parts = split_message(safe_content, 4000)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for i, part in enumerate(content_parts, 1):
                if i == len(content_parts):
                    # –í –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    part += footer_text
                
                msg = await message.answer(
                    part,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )
                sent_messages.append(msg.message_id)
            
            await loading_msg.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id in sent_messages:
            add_user_message(message.from_user.id, msg_id)
        
        print(f"üî¥ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"üî¥ DEBUG: –û—à–∏–±–∫–∞: {str(e)}")
        await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏: {str(e)}")