from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.user_handlers import build_caption_md, escape_markdown_v2, split_message
from bot.keyboards.inline import get_article_keyboard
from bot.state import articles, current_article_index, clear_user_messages, add_user_message
from bot.parser.habr_parser import get_full_article_content

router = Router()

@router.callback_query(F.data.startswith("article_"))
async def paginate_articles(callback: CallbackQuery, bot: Bot):
    global current_article_index
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—å–∏
    await clear_user_messages(callback.from_user.id, bot)
    
    action = callback.data.split("_")[1]

    if action == "next":
        current_article_index += 1
    elif action == "prev":
        current_article_index -= 1
    
    if 0 <= current_article_index < len(articles):
        article = articles[current_article_index]
        caption = build_caption_md(article['title'], article['description'])

        has_photo_message = bool(callback.message.photo)
        target_has_image = bool(article.get('image_url'))

        try:
            if has_photo_message:
                if target_has_image:
                    media = InputMediaPhoto(media=article['image_url'], caption=caption, parse_mode="MarkdownV2")
                    await callback.message.edit_media(
                        media=media,
                        reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
                    )
                else:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å
                    await callback.message.edit_caption(
                        caption=caption,
                        parse_mode="MarkdownV2",
                        reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
                    )
            else:
                if target_has_image:
                    # –ù–µ–ª—å–∑—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ edit; –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg = await callback.message.answer_photo(
                        photo=article['image_url'],
                        caption=caption,
                        parse_mode="MarkdownV2",
                        reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
                    )
                    try:
                        await callback.message.delete()
                    except TelegramBadRequest:
                        pass
                else:
                    await callback.message.edit_text(
                        text=caption,
                        parse_mode="MarkdownV2",
                        reply_markup=get_article_keyboard(current_article_index, len(articles), article['link'])
                    )
        except TelegramBadRequest as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", show_alert=True)

    await callback.answer()

@router.callback_query(F.data.startswith("full_content_"))
async def show_full_content(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await clear_user_messages(callback.from_user.id, bot)
        
        article_index = int(callback.data.split("_")[2])
        
        if 0 <= article_index < len(articles):
            article = articles[article_index]
            article_url = article['link']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏...", show_alert=False)
            
            # –°–ò–ù–•–†–û–ù–ù–´–ô –≤—ã–∑–æ–≤ - —É–±—Ä–∞—Ç—å await!
            full_content = get_full_article_content(article_url)
            
            if not full_content:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é", show_alert=True)
                return
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç—ã –¥–ª—è MarkdownV2
            safe_title = escape_markdown_v2(full_content['title'])
            safe_author = escape_markdown_v2(full_content['author'])
            safe_date = escape_markdown_v2(full_content['date'])
            safe_content = escape_markdown_v2(full_content['content'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            header_text = f"üìñ *{safe_title}*\n\nüë§ –ê–≤—Ç–æ—Ä: {safe_author}\nüìÖ –î–∞—Ç–∞: {safe_date}\n\n"
            footer_text = f"\n\nüîó [–ß–∏—Ç–∞—Ç—å –Ω–∞ Habr]({article_url})"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            available_space = 4096 - len(header_text) - len(footer_text) - 100  # –ó–∞–ø–∞—Å
            
            sent_messages = []
            
            if len(safe_content) <= available_space:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = header_text + safe_content + footer_text
                msg = await callback.message.answer(
                    message_text,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )
                sent_messages.append(msg.message_id)
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                header_msg = await callback.message.answer(
                    header_text,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )
                sent_messages.append(header_msg.message_id)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏
                content_parts = split_message(safe_content, 4000)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                for i, part in enumerate(content_parts, 1):
                    if i == len(content_parts):
                        # –í –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                        part += footer_text
                    
                    msg = await callback.message.answer(
                        part,
                        parse_mode="MarkdownV2",
                        disable_web_page_preview=True
                    )
                    sent_messages.append(msg.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            for msg_id in sent_messages:
                add_user_message(callback.from_user.id, msg_id)
            
        else:
            await callback.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", show_alert=True)