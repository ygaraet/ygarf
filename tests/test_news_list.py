import sys
import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def get_habr_articles():
    """–ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å–∏ —Å Habr"""
    url = "https://habr.com/ru/articles/"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    articles = []
                    # –ò—â–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    post_elements = soup.find_all('article', class_='tm-articles-list__item')[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
                    
                    for post in post_elements:
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                        title_elem = post.find('h2', class_='tm-title') or post.find('h3') or post.find('h2')
                        title = title_elem.text.strip() if title_elem else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
                        
                        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
                        link_elem = title_elem.find('a') if title_elem else None
                        article_url = "https://habr.com" + link_elem.get('href') if link_elem else ''
                        
                        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                        summary_elem = post.find('div', class_='article-formatted-body') or post.find('p')
                        summary = summary_elem.text.strip() if summary_elem else ''
                        
                        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—É –•–∞–±—Ä–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é)
                        image_elem = post.find('img')
                        image = image_elem.get('src') if image_elem else ''
                        
                        articles.append({
                            'title': title,
                            'image': image,
                            'summary': summary,
                            'url': article_url
                        })
                    
                    return articles
                else:
                    print(f"–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status}")
                    return []
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

async def test_news_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π —Å Habr"""
    try:
        articles = await get_habr_articles()
        
        print("=" * 50)
        print("–¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —Å Habr")
        print("=" * 50)
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 —Å—Ç–∞—Ç—å–∏
        assert len(articles) >= 3, f"–ú–∞–ª–æ —Å—Ç–∞—Ç–µ–π: {len(articles)} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)"
        assert isinstance(articles, list), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        
        print(f"‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        print("üìä –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π:")
        
        for i, article in enumerate(articles[:3]):
            print(f"  {i+1}. {article['title'][:60]}...")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_news_list())
    sys.exit(0 if result else 1)