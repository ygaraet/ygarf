import sys
import os
import asyncio

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from test_news_list import get_habr_articles

async def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π —Å Habr"""
    try:
        articles = await get_habr_articles()
        
        print("=" * 50)
        print("–¢–ï–°–¢: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π Habr")
        print("=" * 50)
        
        assert len(articles) > 0, "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        
        validation_results = []
        habr_specific_checks = []
        
        for i, article in enumerate(articles):
            errors = []
            warnings = []
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not article.get('title'):
                errors.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            elif len(article['title'].strip()) == 0:
                errors.append("–ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            
            # –£ –•–∞–±—Ä–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞—Ç–µ–π - —ç—Ç–æ –ù–ï –æ—à–∏–±–∫–∞
            if article.get('image') and not article['image'].startswith(('http://', 'https://')):
                warnings.append("–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            if not article.get('summary'):
                warnings.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")  # –£ –•–∞–±—Ä–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            elif len(article['summary'].strip()) < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –•–∞–±—Ä–∞
                warnings.append("–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
            
            # –•–∞–±—Ä–∞-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not article.get('url') or 'habr.com' not in article['url']:
                warnings.append("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é")
            
            status = "‚úÖ –í–ê–õ–ò–î–ù–ê" if not errors else f"‚ùå –û–®–ò–ë–ö–ò: {', '.join(errors)}"
            if warnings:
                status += f" | ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {', '.join(warnings)}"
            
            validation_results.append((i, article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50], status))
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            habr_specific_checks.append({
                'has_title': bool(article.get('title')),
                'has_image': bool(article.get('image')),
                'has_summary': bool(article.get('summary') and len(article['summary']) > 10),
                'has_valid_url': bool(article.get('url') and 'habr.com' in article['url'])
            })
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –•–∞–±—Ä–∞–º
        total = len(habr_specific_checks)
        titles_count = sum(1 for x in habr_specific_checks if x['has_title'])
        images_count = sum(1 for x in habr_specific_checks if x['has_image'])
        summaries_count = sum(1 for x in habr_specific_checks if x['has_summary'])
        urls_count = sum(1 for x in habr_specific_checks if x['has_valid_url'])
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {total} —Å—Ç–∞—Ç—å—è–º Habr:")
        print(f"  üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏: {titles_count}/{total} ({titles_count/total*100:.1f}%)")
        print(f"  üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {images_count}/{total} ({images_count/total*100:.1f}%)")
        print(f"  üìÑ –û–ø–∏—Å–∞–Ω–∏—è: {summaries_count}/{total} ({summaries_count/total*100:.1f}%)")
        print(f"  üîó –°—Å—ã–ª–∫–∏: {urls_count}/{total} ({urls_count/total*100:.1f}%)")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –•–∞–±—Ä–∞:
        # - –ï—Å—Ç—å —Å—Ç–∞—Ç—å–∏
        # - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–º–µ—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        success = (len(articles) >= 3 and 
                  titles_count/total >= 0.8 and  # 80% –∏–º–µ—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
                  urls_count/total >= 0.9)       # 90% –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        
        if success:
            print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°—Ç–∞—Ç—å–∏ Habr —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_validation())
    sys.exit(0 if result else 1)