import sys
import os
import aiohttp
import asyncio

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def test_status_code():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞ Habr"""
    try:
        test_urls = [
            "https://habr.com/ru/articles/",  # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π
            "https://habr.com/ru/",           # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            "https://habr.com/",              # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è
        ]
        
        print("=" * 50)
        print("–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Habr")
        print("=" * 50)
        
        async with aiohttp.ClientSession() as session:
            results = []
            
            for url in test_urls:
                try:
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {url}")
                    async with session.get(url, timeout=10) as response:
                        status_code = response.status
                        
                        # –î–ª—è –•–∞–±—Ä–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã 200, 301, 302 (—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã)
                        is_success = status_code in [200, 301, 302]
                        status_emoji = "‚úÖ" if is_success else "‚ùå"
                        
                        result = {
                            'url': url,
                            'status_code': status_code,
                            'success': is_success
                        }
                        
                        print(f"   {status_emoji} –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {status_code}")
                        
                        if status_code == 301 or status_code == 302:
                            print(f"   üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {response.headers.get('Location', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        
                        results.append(result)
                        
                except aiohttp.ClientError as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    results.append({
                        'url': url,
                        'status_code': 'CONNECTION_ERROR',
                        'success': False
                    })
                except asyncio.TimeoutError:
                    print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    results.append({
                        'url': url,
                        'status_code': 'TIMEOUT',
                        'success': False
                    })
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 30)
        print("–ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò HABR:")
        print("=" * 30)
        
        success_count = sum(1 for r in results if r['success'])
        
        for result in results:
            status_emoji = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status_emoji} {result['url']} - {result['status_code']}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {success_count}/{len(results)}")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞
        main_success = any(r['success'] and '/articles/' in r['url'] for r in results)
        
        if main_success:
            print("‚úÖ HABR –î–û–°–¢–£–ü–ï–ù: –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å–∏")
        else:
            print("‚ùå HABR –ù–ï–î–û–°–¢–£–ü–ï–ù: –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            
        return main_success
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_status_code())
    sys.exit(0 if result else 1)